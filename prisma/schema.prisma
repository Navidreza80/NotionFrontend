generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String      @id @default(uuid())
  name              String?
  email             String?     @unique
  emailVerified     DateTime?   @map("email_verified")
  image             String?
  accounts          Account[]
  Project           Project[]
  sessions          Session[]
  createdWorkspaces Workspace[] @relation("WorkspaceCreator")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  provider          String
  providerAccountId String  @map("provider_account_id")
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  type              String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Workspace {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creatorId String
  creator   User     @relation("WorkspaceCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([creatorId])
}

model Project {
  id          String   @id
  name        String
  description String?
  createdAt   DateTime @default(now())
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum WorkspaceRole {
  MEMBER
  ADMIN
}
